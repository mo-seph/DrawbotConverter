import svgutils.transform as sg
from lxml import etree
import sys
from dataclasses import dataclass
import re

from drawbot_converter.svg_transformer import SvgTransformer
from drawbot_converter.bot_setup import BotSetup, BoundingBox, Transform
from drawbot_converter.svg_utils import parse_number_units, parse_numbers_units, size_abs


class SVGUtilsTransformer(SvgTransformer):
    def do_transform(self,setup,infile,outfile,trans:Transform,checkfile=None):
        # Read in the drawing
        svg = sg.fromfile(infile)
        drawing = svg.getroot()
        drawing.moveto(trans.x,trans.y,trans.scale)

        # Make a figure the right size for the drawbot
        width = f"{setup.bot_width}"
        height = f"{setup.bot_height}"
        fig = sg.SVGFigure(width=width,height=height)
        fig.root.set('height',height)
        fig.root.set('width',width)
        fig.append([drawing])
        fig.save(outfile)


def transform(setup,infile,outfile,checkfile=None):
    width = f"{setup.bot_width}"
    height = f"{setup.bot_height}"
    fig = sg.SVGFigure(width=width,height=height)
    print(f"Drawing box: {setup.drawing_box()}")
    fig.root.set('height',height)
    fig.root.set('width',width)
    svg = sg.fromfile(infile)
    drawing = svg.getroot()
    scale,x,y = get_placement(setup,svg)

    drawing.moveto(x,y,scale)
    fig.append([drawing])
    fig.save(outfile)

    if checkfile:
        label_setup(fig,setup,text=False)
        fig.save(checkfile)

def get_placement(setup,image):
    x_offset = 0
    y_offset = 0
    if image.width and False:
        img_w =float(re.sub("[^\\d\\.]", "", image.width) )
        img_h =float(re.sub("[^\\d\\.]", "", image.height) )
    else:
        print(f"Image: {image}")
        print(f"Viewbox: {image.root.get('viewBox')}")
        vb = image.root.get('viewBox')
        box = [ float(re.sub("[^\\d\\.-]", "", x) ) for x in vb.split()]
        img_w = box[2]-box[0]
        img_h = box[3] - box[1]
        x_offset = -box[0]
        y_offset = -box[1]

    width_scale = setup.drawing_width / img_w
    height_scale = setup.drawing_height / img_h

    scale = min(width_scale,height_scale)
    place_x = setup.drawing_offset_w + (x_offset*scale)
    place_y = setup.drawing_offset_h + (y_offset*scale)

    if width_scale > height_scale: #Then the drawing will touch top and bottom of box
        place_x = setup.drawing_offset_w + (x_offset*scale) + (setup.drawing_width-(img_w * height_scale))/2
    else:
        place_y = setup.drawing_offset_h + (y_offset*scale)+ (setup.drawing_height -(img_h * width_scale))/2
    return scale, place_x, place_y





if __name__ == '__main__':
    print("Converting SVG...")
    s = BotSetup(
        bot_width=760,
        bot_height=580,
        paper_width=584,
        paper_height=420,
        drawing_width=200,
        drawing_height=200
    ).center_paper().center_drawing()
    #transform(s,"test/scrambler.svg","output/scrambler_transformed.svg","output/scrambler_check.svg")
    transform(s,"input/circle_5_positive_ripple_minified.svg","intermediate/circ5.svg","check/circ5_check.svg")
